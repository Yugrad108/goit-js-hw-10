{"version":3,"file":"2-snackbar.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["//********TODO 1-var Snackbar*****************************/\n\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n// const form = document.querySelector('.form');\n\n// form.addEventListener('submit', handleSubmit);\n\n// function handleSubmit(event) {\n//     event.preventDefault();\n\n//     const formData = new FormData(event.target);\n//     const delay = parseInt(formData.get('delay'));\n//     const state = formData.get('state');\n\n//     if (isNaN(delay) || delay < 0) {\n//         iziToast.warning({\n//             title: 'Warning',\n//             message: 'Please enter a valid positive number for delay',\n//             position: 'topRight'\n//         });\n//         return;\n//     }\n\n//     const promise = new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             if (state === 'fulfilled') {\n//                 resolve(delay);\n//             } else {\n//                 reject(delay);\n//             }\n//         }, delay);\n//     });\n\n//     promise\n//         .then(delay => {\n//             iziToast.success({\n//                 title: 'Success',\n//                 message: `✅ Fulfilled promise in ${delay}ms`,\n//                 position: 'topRight'\n//             });\n//         })\n//         .catch(delay => {\n//             iziToast.error({\n//                 title: 'Error',\n//                 message: `❌ Rejected promise in ${delay}ms`,\n//                 position: 'topRight'\n//             });\n//         });\n\n//     event.target.reset();\n// }\n\n//********TODO 2-var Snackbar*****************************/\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// отримуємо посилання на елемент форми\nconst form = document.querySelector('.form');\n\n// додаємо слухача на подію submit\nform.addEventListener('submit', handleSubmit);\n\n// функція обробки події submit\nfunction handleSubmit(event) {\n    // скасуємо перезавантаження сторінки\n    event.preventDefault();\n\n    // отримуємо дані з форми\n    const formData = new FormData(event.target);\n    const delay = parseInt(formData.get('delay'));\n    const state = formData.get('state');\n\n    // перевірка на валідність вводу\n    if (isNaN(delay) || delay < 0) {\n        iziToast.warning({\n            title: 'Warning',\n            message: 'Please enter a valid positive number for delay',\n            position: 'topRight'\n        });\n        return;\n    }\n\n    // створення промісу\n    const promise = new Promise((resolve, reject) => {\n        // запускаємо таймер на заданий час\n        setTimeout(() => {\n            // якщо вибрано \"fulfilled\" то виконується resolve\n            if (state === 'fulfilled') {\n                resolve(delay);\n            // якщо вибрано \"rejected\" то виконується reject\n            } else if (state === 'rejected') { \n                reject(delay);\n            } else {\n                // якщо не вибрано нічого то виводимо помилку\n                console.error(\"Помилка: Не вибрано стан.\");\n                return;\n            }\n        }, delay);\n    });\n\n    // обробка результату промісу\n    promise\n        .then(delay => {\n            // виводимо успішне повідомлення\n            iziToast.success({\n                title: '',\n                message: `✅ Fulfilled promise in ${delay}ms`,\n                position: 'topRight'\n            });\n        })\n        .catch(delay => {\n            // виводимо помилку\n            iziToast.error({\n                title: '',\n                message: `❌ Rejected promise in ${delay}ms`,\n                position: 'topRight'\n            });\n        });\n\n    // очищуємо форму\n    event.target.reset();\n}\n\n\n\n//********TODO 3-var Snackbar*****************************/\n\n// import iziToast from 'izitoast';\n// import 'izitoast/dist/css/iziToast.min.css';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   delayInput: document.querySelector(\"input[name='delay']\"),\n//   stateInputs: document.querySelectorAll(\"input[name='state']\"),\n// };\n\n// refs.form.addEventListener('submit', evt => {\n//   evt.preventDefault();\n\n//   const delay = refs.delayInput.value;\n\n//   const selectedState = [...refs.stateInputs].find(\n//     input => input.checked\n//   )?.value;\n\n//   if (!selectedState) return;\n\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (selectedState === 'fulfilled') {\n//         resolve(delay);\n//       } else {\n//         reject(delay);\n//       }\n//     }, delay);\n//   });\n\n//   promise\n//     .then(delay => {\n//       iziToast.success({\n//         title: 'Success',\n//         message: `✅ Fulfilled promise in ${delay}ms`,\n//         position: 'topRight',\n//       });\n//     })\n//     .catch(delay => {\n//          iziToast.error({\n//         title: 'Error',\n//         message: `❌ Rejected promise in ${delay}ms`,\n//         position: 'topRight',\n//       });\n//     });\n// });"],"names":["form","handleSubmit","event","formData","delay","state","iziToast","resolve","reject"],"mappings":"oGA4DA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAG3CA,EAAK,iBAAiB,SAAUC,CAAY,EAG5C,SAASA,EAAaC,EAAO,CAEzBA,EAAM,eAAc,EAGpB,MAAMC,EAAW,IAAI,SAASD,EAAM,MAAM,EACpCE,EAAQ,SAASD,EAAS,IAAI,OAAO,CAAC,EACtCE,EAAQF,EAAS,IAAI,OAAO,EAGlC,GAAI,MAAMC,CAAK,GAAKA,EAAQ,EAAG,CAC3BE,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,iDACT,SAAU,UACtB,CAAS,EACD,MACH,CAGe,IAAI,QAAQ,CAACC,EAASC,IAAW,CAE7C,WAAW,IAAM,CAEb,GAAIH,IAAU,YACVE,EAAQH,CAAK,UAENC,IAAU,WACjBG,EAAOJ,CAAK,MACT,CAEH,QAAQ,MAAM,2BAA2B,EACzC,MACH,CACJ,EAAEA,CAAK,CAChB,CAAK,EAII,KAAKA,GAAS,CAEXE,EAAS,QAAQ,CACb,MAAO,GACP,QAAS,0BAA0BF,CAAK,KACxC,SAAU,UAC1B,CAAa,CACb,CAAS,EACA,MAAMA,GAAS,CAEZE,EAAS,MAAM,CACX,MAAO,GACP,QAAS,yBAAyBF,CAAK,KACvC,SAAU,UAC1B,CAAa,CACb,CAAS,EAGLF,EAAM,OAAO,OACjB"}