{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["//***************TODO 1-var Timer**************************** */\n// импортируем библиотеку flatpickr\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n// импортируем библиотеку iziToast\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// получаем ссылки на DOM-элементы\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\n\n// переменные для хранения даты, выбранной пользователем, и интервала таймера\nlet userSelectedDate;\nlet countdownInterval;\n\n// настройки для flatpickr\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    // функция, которая будет вызвана, когда пользователь выберет дату\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        if (userSelectedDate < new Date()) {\n            // если выбранная дата меньше текущей, то выводим ошибку\n            iziToast.error({\n                title: '',\n                message: 'Please choose a date in the future',\n                position: 'topRight'\n            });\n            startBtn.disabled = true;\n        } else {\n            startBtn.disabled = false;\n        }\n    },\n};\n\n// инициализируем flatpickr\nflatpickr(datetimePicker, options);\n\n// отключаем кнопку \"Старт\", до тех пор, пока пользователь не выберет дату\nstartBtn.disabled = true;\n\n// добавляем слушателя на кнопку \"Старт\"\nstartBtn.addEventListener('click', startCountdown);\n\n// функция, которая будет вызвана, когда пользователь нажмет кнопку \"Старт\"\nfunction startCountdown() {\n    startBtn.disabled = true;\n    datetimePicker.disabled = true;\n\n    // запускаем таймер\n    countdownInterval = setInterval(() => {\n        const now = new Date();\n        const diff = userSelectedDate - now;\n\n        if (diff <= 0) {\n            clearInterval(countdownInterval);\n            datetimePicker.disabled = false;\n            updateTimer(0, 0, 0, 0);\n            return;\n        }\n\n        // преобразуем разницу в днях, часах, минутах, секундах\n        const { days, hours, minutes, seconds } = convertMs(diff);\n        // обновляем таймер\n        updateTimer(days, hours, minutes, seconds);\n    }, 1000);\n}\n\n// функция, которая обновляет таймер\nfunction updateTimer(days, hours, minutes, seconds) {\n    daysValue.textContent = addLeadingZero(days);\n    hoursValue.textContent = addLeadingZero(hours);\n    minutesValue.textContent = addLeadingZero(minutes);\n    secondsValue.textContent = addLeadingZero(seconds);\n}\n\n// функция, которая добавляет ведущие нули к цифре\nfunction addLeadingZero(value) {\n    return String(value).padStart(2, '0');\n}\n\n// функция, которая преобразует разницу в днях, часах, минутах, секундах\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\n//***************TODO 2-var Timer**************************** */\n\n\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n// const DOM = {\n//   datetimePicker: '#datetime-picker',\n//   startBtn: '[data-start]',\n//   days: '[data-days]',\n//   hours: '[data-hours]',\n//   minutes: '[data-minutes]',\n//   seconds: '[data-seconds]'\n// };\n\n// const SECOND = 1000;\n// const MINUTE = SECOND * 60;\n// const HOUR = MINUTE * 60;\n// const DAY = HOUR * 24;\n\n// class Timer {\n//   constructor() {\n//     this.picker = document.querySelector(DOM.datetimePicker);\n//     this.startBtn = document.querySelector(DOM.startBtn);\n//     this.daysEl = document.querySelector(DOM.days);\n//     this.hoursEl = document.querySelector(DOM.hours);\n//     this.minutesEl = document.querySelector(DOM.minutes);\n//     this.secondsEl = document.querySelector(DOM.seconds);\n//     this.intervalId = null;\n//     this.init();\n//   }\n\n//   init() {\n//     this.setupFlatpickr();\n//     this.startBtn.disabled = true;\n//     this.startBtn.addEventListener('click', () => this.start());\n//   }\n\n//   setupFlatpickr() {\n//     flatpickr(this.picker, {\n//       enableTime: true,\n//       time_24hr: true,\n//       defaultDate: new Date(),\n//       minuteIncrement: 1,\n//       onClose: dates => this.validateDate(dates[0])\n//     });\n//   }\n\n//   validateDate(date) {\n//     if (date < Date.now()) {\n//       iziToast.error({message: 'Please choose a date in the future', position: 'topRight'});\n//       this.startBtn.disabled = true;\n//     } else {\n//       this.targetDate = date;\n//       this.startBtn.disabled = false;\n//     }\n//   }\n\n//   start() {\n//     this.startBtn.disabled = true;\n//     this.picker.disabled = true;\n    \n//     this.intervalId = setInterval(() => {\n//       const diff = this.targetDate - Date.now();\n      \n//       if (diff <= 0) {\n//         this.stop();\n//         return;\n//       }\n      \n//       this.updateDisplay(diff);\n//     }, 1000);\n//   }\n\n//   stop() {\n//     clearInterval(this.intervalId);\n//     this.picker.disabled = false;\n//     this.updateDisplay(0);\n//   }\n\n//   updateDisplay(ms) {\n//     const {days, hours, minutes, seconds} = this.convertMs(ms);\n//     this.daysEl.textContent = this.formatTime(days);\n//     this.hoursEl.textContent = this.formatTime(hours);\n//     this.minutesEl.textContent = this.formatTime(minutes);\n//     this.secondsEl.textContent = this.formatTime(seconds);\n//   }\n\n//   convertMs(ms) {\n//     return {\n//       days: Math.floor(ms / DAY),\n//       hours: Math.floor((ms % DAY) / HOUR),\n//       minutes: Math.floor((ms % HOUR) / MINUTE),\n//       seconds: Math.floor((ms % MINUTE) / SECOND)\n//     };\n//   }\n\n//   formatTime(value) {\n//     return String(value).padStart(2, '0');\n//   }\n// }\n\n// new Timer();\n\n//***************TODO 3-var Timer**************************** */\n\n\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n// const timeUnits = {\n//   days: 86400000,\n//   hours: 3600000,\n//   minutes: 60000,\n//   seconds: 1000\n// };\n\n// class AdvancedTimer {\n//   #elements = {};\n//   #intervalId = null;\n//   #targetDate = null;\n\n//   constructor(selectors) {\n//     this.selectors = selectors;\n//     this.initialize();\n//   }\n\n//   initialize() {\n//     this.cacheDOM();\n//     this.setupFlatpickr();\n//     this.#elements.startBtn.disabled = true;\n//     this.addEventListeners();\n//   }\n\n//   cacheDOM() {\n//     for (const [key, selector] of Object.entries(this.selectors)) {\n//       this.#elements[key] = document.querySelector(selector);\n//     }\n//   }\n\n//   setupFlatpickr() {\n//     this.flatpickr = flatpickr(this.#elements.datetimePicker, {\n//       enableTime: true,\n//       time_24hr: true,\n//       defaultDate: new Date(),\n//       minuteIncrement: 1,\n//       onClose: dates => this.handleDateSelect(dates[0])\n//     });\n//   }\n\n//   handleDateSelect(date) {\n//     if (date < Date.now()) {\n//       this.showError('Please choose a date in the future');\n//       this.#elements.startBtn.disabled = true;\n//       return;\n//     }\n//     this.#targetDate = date;\n//     this.#elements.startBtn.disabled = false;\n//   }\n\n//   addEventListeners() {\n//     this.#elements.startBtn.addEventListener('click', () => {\n//       this.startCountdown();\n//       this.#elements.startBtn.disabled = true;\n//     });\n    \n//     this.#elements.datetimePicker.addEventListener('change', () => {\n//       if (this.#intervalId) {\n//         this.resetTimer();\n//       }\n//     });\n//   }\n\n//   startCountdown() {\n//     this.#intervalId = setInterval(() => {\n//       const diff = this.#targetDate - Date.now();\n      \n//       if (diff <= 0) {\n//         this.resetTimer();\n//         return;\n//       }\n      \n//       this.updateUI(diff);\n//     }, 1000);\n//   }\n\n//   resetTimer() {\n//     clearInterval(this.#intervalId);\n//     this.#intervalId = null;\n//     this.#elements.datetimePicker.disabled = false;\n//     this.updateUI(0);\n//   }\n\n//   updateUI(ms) {\n//     Object.entries(this.calculateTime(ms)).forEach(([unit, value]) => {\n//       this.#elements[unit].textContent = this.format(value);\n//     });\n//   }\n\n//   calculateTime(ms) {\n//     return Object.entries(timeUnits).reduce((acc, [unit, divisor]) => {\n//       acc[unit] = Math.floor(ms / divisor);\n//       ms %= divisor;\n//       return acc;\n//     }, {});\n//   }\n\n//   format(value) {\n//     return String(value).padStart(2, '0');\n//   }\n\n//   showError(message) {\n//     iziToast.error({message, position: 'topRight'});\n//   }\n// }\n\n// new AdvancedTimer({\n//   datetimePicker: '#datetime-picker',\n//   startBtn: '[data-start]',\n//   days: '[data-days]',\n//   hours: '[data-hours]',\n//   minutes: '[data-minutes]',\n//   seconds: '[data-seconds]'\n// });\n\n//***************TODO 4-var Timer**************************** */\n\n\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n// const TIMER_UNITS = ['days', 'hours', 'minutes', 'seconds'];\n// const UNIT_VALUES = [86400000, 3600000, 60000, 1000];\n\n// class UltraTimer {\n//   #state = {\n//     targetDate: null,\n//     intervalId: null,\n//     elements: {}\n//   };\n\n//   constructor(selectors) {\n//     this.selectors = selectors;\n//     this.init();\n//   }\n\n//   init() {\n//     this.cacheElements();\n//     this.initFlatpickr();\n//     this.initObservers();\n//     this.setState('startBtn', 'disabled', true);\n//   }\n\n//   cacheElements() {\n//     TIMER_UNITS.forEach(unit => {\n//       this.#state.elements[unit] = document.querySelector(this.selectors[unit]);\n//     });\n//     this.#state.elements.datetimePicker = document.querySelector(this.selectors.datetimePicker);\n//     this.#state.elements.startBtn = document.querySelector(this.selectors.startBtn);\n//   }\n\n//   initFlatpickr() {\n//     this.flatpickr = flatpickr(this.#state.elements.datetimePicker, {\n//       enableTime: true,\n//       time_24hr: true,\n//       defaultDate: new Date(),\n//       minuteIncrement: 1,\n//       onClose: dates => this.handleDateChange(dates[0])\n//     });\n//   }\n\n//   initObservers() {\n//     const handler = {\n//       set: (target, property, value) => {\n//         target[property] = value;\n//         if (property === 'targetDate') this.validateDate(value);\n//         return true;\n//       }\n//     };\n    \n//     this.stateProxy = new Proxy(this.#state, handler);\n//     this.#state.elements.startBtn.addEventListener('click', () => this.start());\n//   }\n\n//   handleDateChange(date) {\n//     this.stateProxy.targetDate = date;\n//   }\n\n//   validateDate(date) {\n//     if (date < Date.now()) {\n//       this.showError('Please choose a date in the future');\n//       this.setState('startBtn', 'disabled', true);\n//       return;\n//     }\n//     this.setState('startBtn', 'disabled', false);\n//   }\n\n//   start() {\n//     this.setState('startBtn', 'disabled', true);\n//     this.setState('datetimePicker', 'disabled', true);\n    \n//     this.stateProxy.intervalId = setInterval(() => {\n//       const diff = this.#state.targetDate - Date.now();\n      \n//       if (diff <= 0) {\n//         this.stop();\n//         return;\n//       }\n      \n//       this.animateTimer(diff);\n//     }, 1000);\n//   }\n\n//   stop() {\n//     clearInterval(this.#state.intervalId);\n//     this.setState('datetimePicker', 'disabled', false);\n//     this.animateTimer(0);\n//   }\n\n//   animateTimer(ms) {\n//     const values = this.calculateTimeValues(ms);\n//     TIMER_UNITS.forEach((unit, index) => {\n//       const newValue = String(values[index]).padStart(2, '0');\n//       if (this.#state.elements[unit].textContent !== newValue) {\n//         this.#state.elements[unit].textContent = newValue;\n//       }\n//     });\n//   }\n\n//   calculateTimeValues(ms) {\n//     return UNIT_VALUES.map(unit => {\n//       const value = Math.floor(ms / unit);\n//       ms %= unit;\n//       return value;\n//     });\n//   }\n\n//   setState(element, prop, value) {\n//     this.#state.elements[element][prop] = value;\n//   }\n\n//   showError(message) {\n//     iziToast.error({message, position: 'topRight'});\n//   }\n// }\n\n// new UltraTimer({\n//   datetimePicker: '#datetime-picker',\n//   startBtn: '[data-start]',\n//   days: '[data-days]',\n//   hours: '[data-hours]',\n//   minutes: '[data-minutes]',\n//   seconds: '[data-seconds]'\n// });"],"names":["datetimePicker","startBtn","daysValue","hoursValue","minutesValue","secondsValue","userSelectedDate","countdownInterval","options","selectedDates","iziToast","flatpickr","startCountdown","diff","updateTimer","days","hours","minutes","seconds","convertMs","addLeadingZero","value","ms"],"mappings":"2GASA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAG5D,IAAIC,EACAC,EAGJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACnBH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,IAAI,MAEvBI,EAAS,MAAM,CACX,MAAO,GACP,QAAS,qCACT,SAAU,UAC1B,CAAa,EACDT,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAE3B,CACL,EAGAU,EAAUX,EAAgBQ,CAAO,EAGjCP,EAAS,SAAW,GAGpBA,EAAS,iBAAiB,QAASW,CAAc,EAGjD,SAASA,GAAiB,CACtBX,EAAS,SAAW,GACpBD,EAAe,SAAW,GAG1BO,EAAoB,YAAY,IAAM,CAElC,MAAMM,EAAOP,EADD,IAAI,KAGhB,GAAIO,GAAQ,EAAG,CACX,cAAcN,CAAiB,EAC/BP,EAAe,SAAW,GAC1Bc,EAAY,EAAG,EAAG,EAAG,CAAC,EACtB,MACH,CAGD,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAI,EAExDC,EAAYC,EAAMC,EAAOC,EAASC,CAAO,CAC5C,EAAE,GAAI,CACX,CAGA,SAASJ,EAAYC,EAAMC,EAAOC,EAASC,EAAS,CAChDhB,EAAU,YAAckB,EAAeL,CAAI,EAC3CZ,EAAW,YAAciB,EAAeJ,CAAK,EAC7CZ,EAAa,YAAcgB,EAAeH,CAAO,EACjDZ,EAAa,YAAce,EAAeF,CAAO,CACrD,CAGA,SAASE,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAGA,SAASF,EAAUG,EAAI,CAMnB,MAAMP,EAAO,KAAK,MAAMO,EAAK,KAAG,EAC1BN,EAAQ,KAAK,MAAOM,EAAK,MAAO,IAAI,EACpCL,EAAU,KAAK,MAAQK,EAAK,MAAO,KAAQ,GAAM,EACjDJ,EAAU,KAAK,MAASI,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAP,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C"}